https://www.youtube.com/watch?v=xNefZ51jHKg&t=148s

https://minikube.sigs.k8s.io/docs/start/
install kubectl -->curl.exe -LO "https://dl.k8s.io/release/v1.28.1/bin/windows/amd64/kubectl.exe"
https://docs.docker.com/desktop/install/windows-install/

Note: Virtualization should be emabled to work with docker/minikube [how to check ?  task manager-->performance ---> cpu ]

minikube start
minikube status
kubectl get no

kubectl delete all --all -------------> to delete all the resources in k8s cluster


Creaer a file ---pod.yaml
====================
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
    - containerPort: 80
==========================

kubectl apply -f pod.yaml -n rahul-devops
kubectl get po -n rahul-devops -o wide
to get inside of minikube node-------> minikube ssh
curl 10.244.0.127




create a folder --example mk and create file pod-service.yaml

kubectl config set-context --current --namespace=<namespace-name> =================> to switch to required namespace

=================
apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    app.kubernetes.io/name: proxy
spec:
  containers:
  - name: nginx
    image: nginx:latest
    ports:
      - containerPort: 80
        name: http-web-svc

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app.kubernetes.io/name: proxy
  ports:
  - name: name-of-service-port
    protocol: TCP
    port: 80
    targetPort: 80
  type: NodePort 
=========================

 then kubectl apply -f file-name.yaml

 minikube service nginx-service=================> to get the URL for the service

=========================================CD using argocd==========================

1)Install argocd operator using [https://operatorhub.io/operator/argocd-operator]

curl -sL https://github.com/operator-framework/operator-lifecycle-manager/releases/download/v0.25.0/install.sh | bash -s v0.25.0
kubectl create -f https://operatorhub.io/install/argocd-operator.yaml
kubectl get csv -n operators

2)then create a file like argo-cd.yaml
==
apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: example-argocd
  labels:
    example: basic
spec: {}
==

3)then apply it-------> kubectl apply -f argo-cd.yaml

4) edit example-argocd-server config from cluster ip to nodeport ---------->Type: NodePort
  kubectl edit service example-argocd-server

5)  minikube service example-argocd-server

6) access the url from browser ------->  http://127.0.0.1:51858

7)kubectl edit secret example-argocd-cluster ------------------> to get the argocd secret

8) echo REJTeXNYZlVDaXBON3puMkZ3QUVjTFliSDB1ZzRLTzE= | base64 -d ---------------------> decoding to get the argocd passsword

so arcd creds -----username=admin 
            passowrd=output of the above one

9) create a new app in ARCOCD  ------------> 

                      **GENERAL**
                      Application name= jaswanth
                      project name= default
                      sync policy= automatic
                      **SOURCE**
                      Repository URL= https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero
                      path= java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests
                      **DESTINATION**
                      cluster url = https://kubernetes.default.svc
                      namespace = default

====================================================================================================

pipeline {
    
    
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  
  
  stages {
      
    stage('Checkout') {
      steps {
        sh 'echo passed'
        git branch: 'main', url: 'https://github.com/jaswanthnasa/Jenkins-Zero-To-Hero.git'
      }
    }
    
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "jas09563/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }


 stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
            GIT_USER_NAME = "jaswanthnasa"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "test@gmail.com"
                    git config user.name "Mighty Raju"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    # git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add .
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }  
  }
}  
====================================================================================================================

IDEA--IMPLEMENTAION----------
BUILD_NUMBER=${BUILD_NUMBER}
TAG_NUMBER=`expr ${BUILD_NUMBER} - 1`

## sed -i "s/${TAG_NUMBER}/${BUILD_NUMBER}/g" test.yaml
## sed -i 's/${APP_NAME}.*/${APP_NAME}:${IMAGE_TAG}/g' deployment.yaml

sed -i 's/ultimate-cicd:.*/ultimate-cicd:${BUILD_NUMBER}/g' deployment.yaml=========can use this








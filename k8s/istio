‚òëÔ∏èIstio is a service mesh implementation 
service mesh manages communication between microservices


‚òëÔ∏èchallanges/problems with microservices in K8s:
inorder to communicate one service to other, we need to add end points in it
security ---> comminication inside cluster not secure, every one inside cluster can talk to any other service , so if any hacker get access to k8s cluster they can access any of the servcice
have to implement re-try logic to the service [in case of any service is not rechable]
for monitoring devlopers have to add non-business logic to track metrics for all services, causing adds complexity to the servcies 


‚úÖcontrolplane injects proxy/sidecar containers in all services/pods
controlplane-------------------->Istiod
proxy/sidecar containers-------->Envoy [an open source project that istio uses]


‚úÖistio is configures with k8s YAML files
istio uses k8s customRecourceDefinitions [CRD]
	CRD----->extending k8s API, custom k8s component/object [3rd party tools--------istio,promotheus]

üìù
VirtualService------------>how to route traffic to one service
DestinationRule---------->configure policies to that traffic [which loadbalancing can be used to reach to pods]

Step 1: Our role is to create CRDs
Step 2: Istiod [controlplane] converts these high level routing rules into Envoy-specific configurations
Step 3: Configuration is propagated into proxy/sidecars
proxies can communicate wihtout connecting to Istiod/controlplane

‚úÖIstio Features:
Service Dsicovery [Istiod has internal registry for services & their end points, new services gets registered automatically]
Security [certificate management - secure TLS communicataion between microservices]
Metrics & Tracing [proxies will collet these and send back to controlplane]



‚úÖIstio gateway/ instio ingress gateway:
Entry point to k8s cluster
alternative to nginx ingress controller
it directs traffic to microservices using VirtualService
===================================================================


‚òëÔ∏èWhat------> traffic management in k8s cluster[east-west]
	east-west------> traffic within k8s services
	north-south----> traffic outside of k8s cluster like ingress,egress

‚òëÔ∏èWhy-------> 1) adds mTLS [secure communication b/w services]
	       mTls--->Each services will have a Certificate [generated by CA of Istio], so that services will trust each other before communicates.
	       incase of normal TLS [client only has certificate , server automatically trust client]
	    2) Canary/BlueGreen deployment
	    3) Observability using Kiali

minikube ssh
sudo cat /etc/kubernetes/manifests/kube-apiserver.yaml----------> to check what are all admission controlellers enabled on cluster
           --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota																


‚òëÔ∏èTo download istio[specific version]
curl -L -o istio.zip https://github.com/istio/istio/releases/download/1.21.6/istio-1.21.6-win-amd64.zip

‚òëÔ∏èwe have command line utility for istio ---->istioclt

‚òëÔ∏èkubectl get mutatingwebhookconfiguration





**********references********************
https://www.youtube.com/watch?v=16fgzklcF7Y
https://www.youtube.com/watch?v=eSNetKBe7Z8
https://github.com/iam-veeramalla/istio-guide/tree/main
https://istio.io/latest/docs/setup/getting-started/